scale_y_continuous(trans = "log",  # Apply ln() transformation
breaks = scales::trans_breaks("log", function(x) exp(x)),  # Set appropriate breaks
labels = scales::trans_format("log", scales::math_format(e^.x))) +  # Format labels
scale_fill_manual(values = "skyblue") +  # Custom fill color
theme(legend.position = "none")  # Remove legend
# Print the plot
print(p)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")  # Installs ggplot2 along with other packages
library(tidyverse)  # Loads ggplot2 and other tidyverse packages
# Read the data
df <- read_tsv("all_loci_ML_data.txt")
# Convert data to long format
df_long <- df %>%
pivot_longer(cols = -locname, names_to = "variable", values_to = "value")
# View the first few rows
glimpse(df)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue") {
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y_continuous(trans = "log",  # Apply ln() transformation
breaks = scales::trans_breaks("log", function(x) exp(x)),  # Set appropriate breaks
labels = scales::trans_format("log", scales::math_format(e^.x))) +  # Format labels
scale_fill_manual(values = fill_color) +  # Apply custom fill color
theme(legend.position = "none")  # Remove legend
}
# Example usage
p <- violin_plot(df, y = "alignment_length", fill_color = "lightgreen")
print(p)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
if (logscale) {
scale_y_continuous(trans = "log",  # Apply ln() transformation
breaks = scales::trans_breaks("log", function(x) exp(x)),  # Set appropriate breaks
labels = scales::trans_format("log", scales::math_format(e^.x))) +  # Format labels
}
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
if (logscale) {
scale_y_continuous(trans = "log",  # Apply ln() transformation
breaks = scales::trans_breaks("log", function(x) exp(x)),  # Set appropriate breaks
labels = scales::trans_format("log", scales::math_format(e^.x))) +  # Format labels
}
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
if (logscale) {
scale_y_continuous(trans = "log",  # Apply ln() transformation
breaks = scales::trans_breaks("log", function(x) exp(x)),  # Set appropriate breaks
labels = scales::trans_format("log", scales::math_format(e^.x))) +  # Format labels
}
# Generate plot
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none")  # Remove legend
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none")  # Remove legend
}
# Example usage:
# Normal scale
p1 <- violin_plot(df, "alignment_length", fill_color = "red", logscale = FALSE)
print(p1)
# Example usage:
# Normal scale
p1 <- violin_plot(df, "alignment_length", fill_color = "red", logscale = TRUE)
print(p1)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define y-axis transformation & label conditionally
if (logscale) {
scale_y <- scale_y_continuous(trans = "log",
breaks = log_breaks(base = exp(1)),  # More human-readable ln() scale
labels = label_number())  # Removes scientific notation
y_label <- paste("ln(", y, ")", sep = "")  # Update y-axis label
} else {
scale_y <- scale_y_continuous()  # Default linear scale
y_label <- y  # Keep the original label
}
# Generate plot
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
labs(y = y_label) +  # Update y-axis label
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none")  # Remove legend
}
# Example usage:
# Normal scale
p1 <- violin_plot(df, "alignment_length", fill_color = "red", logscale = FALSE)
print(p1)
# Log (ln) scale
p2 <- violin_plot(df, "alignment_length", fill_color = "blue", logscale = TRUE)
library(scales)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define y-axis transformation & label conditionally
if (logscale) {
scale_y <- scale_y_continuous(trans = "log",
breaks = log_breaks(base = exp(1)),  # More human-readable ln() scale
labels = label_number())  # Removes scientific notation
y_label <- paste("ln(", y, ")", sep = "")  # Update y-axis label
} else {
scale_y <- scale_y_continuous()  # Default linear scale
y_label <- y  # Keep the original label
}
# Generate plot
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
labs(y = y_label) +  # Update y-axis label
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none")  # Remove legend
}
# Log (ln) scale
p2 <- violin_plot(df, "alignment_length", fill_color = "blue", logscale = TRUE)
print(p2)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE,
loci_subset = NULL, subset_label = "subset") {
# Subset the data if loci_subset is provided
if (!is.null(loci_subset)) {
df_subset <- df %>% filter(locname %in% loci_subset)  # Filter only selected loci
x_label = subset_label
} else {
df_subset <- df  # Use full dataset
x_label = "All Loci"
}
# Define y-axis transformation & label conditionally
if (logscale) {
scale_y <- scale_y_continuous(trans = "log",
breaks = log_breaks(base = exp(1)),  # More human-readable ln() scale
labels = label_number())  # Removes scientific notation
y_label <- paste("ln(", y, ")", sep = "")  # Update y-axis label
} else {
scale_y <- scale_y_continuous()  # Default linear scale
y_label <- y  # Keep the original label
}
# Generate plot
ggplot(df_subset, aes(x = x_label, y = .data[[y]], fill = x_label)) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df_subset[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
labs(x = x_label, y = y_label) +  # Update axis labels
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none")  # Remove legend
}
# Example usage:
# Full dataset (default settings)
p1 <- violin_plot(df, "alignment_length", fill_color = "red", logscale = FALSE)
print(p1)
# Log scale + Custom x-label + Subset of loci
selected_loci <- c("SISRS_contig-1000000007.fasta", "SISRS_contig-100000000.fasta")
p2 <- violin_plot(df, "alignment_length", fill_color = "blue", logscale = TRUE,
loci_subset = selected_loci, subset_label = "Subset of Loci")
print(p2)
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = "", y = .data[[y]], fill = "")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none")  # Remove legend
}
# Example usage:
# Normal scale
p1 <- violin_plot(df, "alignment_length", fill_color = "red", logscale = TRUE)
print(p1)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = "All Loci", y = .data[[y]], fill = "All Loci")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none") +  # Remove legend
labs(x = "All Loci", y = y)  # Label x-axis
}
# Example usage:
# Normal scale
p1 <- violin_plot(df, "alignment_length", fill_color = "red", logscale = TRUE)
print(p1)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")  # Installs ggplot2 along with other packages
library(tidyverse)  # Loads ggplot2 and other tidyverse packages
# Read the data
df <- read_tsv("all_loci_ML_data.txt")
# Convert data to long format
df_long <- df %>%
pivot_longer(cols = -locname, names_to = "variable", values_to = "value")
# View the first few rows
glimpse(df)
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = "All Loci", y = .data[[y]], fill = "All Loci")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none") +  # Remove legend
labs(x = "All Loci", y = y)  # Label x-axis
}
# Example usage
p <- violin_plot(df, y = "alignment_length", fill_color = "lightgreen")
print(p)
#install.packages("tidyverse")  # Installs ggplot2 along with other packages
library(tidyverse)  # Loads ggplot2 and other tidyverse packages
#install.packages("tidyverse")  # Installs ggplot2 along with other packages
library(tidyverse)  # Loads ggplot2 and other tidyverse packages
# Define the function
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = "All Loci", y = .data[[y]], fill = "All Loci")) +
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none") +  # Remove legend
labs(x = "All Loci", y = y)  # Label x-axis
}
# Example usage
p <- violin_plot(df, y = "alignment_length", fill_color = "lightgreen")
print(p)
violin_plot <- function(df, y, fill_color = "skyblue", logscale = FALSE) {
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = factor(1), y = .data[[y]], fill = "All Loci")) +  # Use factor(1) for a single x value
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none") +  # Remove legend
labs(x = "All Loci", y = y)  # Label x-axis
}
# Example usage
p <- violin_plot(df, y = "alignment_length", fill_color = "lightgreen")
print(p)
# View the first few rows
glimpse(df)
# Read the data
df <- read_tsv("all_loci_ML_data.txt")
# View the first few rows
glimpse(df)
# Iterate through column names
for (col in colnames(df)) {
print(col)  # or perform any operation on the column
}
colnames(df)
# column names
colnames(df)[1]
# column names
colnames(df)[2:]
# column names
colnames(df)[2,]
# column names
colnames(df)
# column names
colnames(df)[-1]
# column names
features = colnames(df)[-1]
for i in features{
for (i in features){
print(i)
}
counter = 1
name = "plot" + counter
name = "plot" + str(counter)
counter <- 1
for (i in features) {
name <- paste0("plot", counter)  # Use paste0() for string concatenation
counter <- counter + 1  # Increment counter
print(name)  # Optional: Print the generated name
}
counter <- 1
for (i in features) {
name <- paste0("p", counter)  # Use paste0() for string concatenation
counter <- counter + 1  # Increment counter
print(name)  # Optional: Print the generated name
}
counter <- 1
for (i in features) {
plot <- violin_plot(df, i) #plot the feature
name <- paste0("p", counter)  #generate a dynamic variable name
assign(name, plot) #assign a plot to the dynamically named variable
counter <- counter + 1  #increment counter
print(name)
print(plot)
}
tinytex::reinstall_tinytex(repository = "illinois")
# Extract rows where alignment_length has non-finite values
df_non_finite <- df %>% filter(!is.finite(alignment_length) | is.na(alignment_length))
# View the extracted rows
print(df_non_finite)
# Extract rows where alignment_length has non-finite values
df_non_finite <- df %>% filter(!is.finite(df) | is.na(alignment_length))
# Extract rows where any value in the row is non-finite
df_non_finite <- df %>% filter(rowSums(!is.finite(df)) > 0)
# Read the data
df <- read_tsv("all_loci_ML_data.txt")
#install.packages("tidyverse")  # Installs ggplot2 along with other packages
library(tidyverse)  # Loads ggplot2 and other tidyverse packages
# Read the data
df <- read_tsv("all_loci_ML_data.txt")
# View the first few rows
glimpse(df)
# Extract rows where any value in the row is non-finite
df_non_finite <- df %>% filter(rowSums(!is.finite(df)) > 0)
# Extract rows where any value is NA
df_na <- df %>% filter(if_any(everything(), is.na))
# View the extracted rows
print(df_na)
# Read the data
features <- read_tsv("all_loci_ML_data.txt")
# Read the data
features <- read_tsv("all_loci_ML_data.txt",show_col_types = FALSE)
# View the first few rows
glimpse(features)
# Read the data
features <- read_tsv("all_loci_ML_data.txt",show_col_types = FALSE)
# View the first few rows
glimpse(features)
# column names
feature_names = colnames(features)[-1]
violin_plot <- function(features, y, fill_color = "darkgreen", logscale = FALSE) {
# Remove NA values
df <- features %>% filter(!is.na(.data[[x_col]]), !is.na(.data[[y_col]]))
# Define scale transformation conditionally
scale_y <- if (logscale) {
scale_y_continuous(trans = "log",
breaks = scales::trans_breaks("log", function(x) exp(x)),
labels = scales::trans_format("log", scales::math_format(e^.x)))
} else {
scale_y_continuous()  # Default linear scale
}
# Generate plot
ggplot(df, aes(x = factor(1), y = .data[[y]], fill = "All Loci")) +  # Use factor(1) for a single x value
theme_bw() +
geom_violin(color = "black") +  # Violin plot with black border
geom_hline(yintercept = median(df[[y]], na.rm = TRUE), linetype = "dashed", linewidth = 0.5) +  # Dashed median line
stat_summary(fun = median, fun.min = median, fun.max = median,
geom = "crossbar", width = 0.25) +  # Crossbar at median
stat_summary(fun = mean, fun.min = mean, fun.max = mean,
geom = "point", shape = 5) +  # Diamond shape for mean
scale_y +  # Apply the chosen scale (log or linear)
scale_fill_manual(values = fill_color) +  # Custom fill color
theme(legend.position = "none") +  # Remove legend
labs(x = "All Loci", y = y)  # Label x-axis
}
y <- "alignment length"
df[y]
df[col=y]
features[y]
# Read the data
features <- read_tsv("all_loci_ML_data.txt")
# View the first few rows
glimpse(features)
# Read the data
features <- read_tsv("all_loci_ML_data.txt",show_col_types = FALSE)
features[y]
colnames(features)
y <- alignment_length
y <- "alignment_length"
features[y]
feature_names
